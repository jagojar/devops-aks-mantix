trigger:
- none

name: Deploy Bicep files

variables:
  vmImageName: 'ubuntu-latest'

  azureServiceConnection: 'AKS-Service-Connection'
  resourceGroupName: 'aks-demo-rg'
  location: 'centralus'
  templateFile: './Infrastructure/main.bicep'
  imageRepository: 'azure-vote-front'
  dockerfilePath: '**/Dockerfile'  
  dockerRegistryServiceConnection: 'Docker-Registry-Connection'
  tag: 'v'
  imagePullSecret: 'acrpullsec'
  k8sNamespace: 'default'
  kubernetesServiceConnection: 'mtt-aks-connection'

stages:
- stage: Build
  displayName: Build Images
  jobs:  
  - job: Infrastructure 
    displayName: Build Infrastructure
    pool:
      vmImage: $(vmImageName)
    steps:
    # - task: AzureResourceManagerTemplateDeployment@3
    #   inputs:
    #     deploymentScope: 'Resource Group'
    #     azureResourceManagerConnection: '$(azureServiceConnection)'
    #     action: 'Create Or Update Resource Group'
    #     resourceGroupName: '$(resourceGroupName)'
    #     location: '$(location)'
    #     templateLocation: 'Linked artifact'
    #     csmFile: '$(templateFile)'
    #     overrideParameters: '-clusterName $(clusterName) -dnsPrefix $(dnsPrefix) -linuxAdminUsername $(linuxAdminUsername) -sshRSAPublicKey $(SSH_KEY_VAL)'
    #     deploymentMode: 'Incremental'
    #     deploymentName: 'DeployPipelineTemplate'
    #   env:
    #     SSH_KEY_VAL: '$(ssh_key)'

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag).$(Build.BuildId)

    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests' 

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'tec-man-aks' #customize with your environment
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:              
              action: deploy
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/azure-vote-all-in-one-redis.yml                
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)